name: $(TeamProject).$(Build.DefinitionName).$(SourceBranchName)_$(Date:yyyyMMdd)_cd_$(Build.BuildId).$(Rev:r)

pool:
  name: Standard-Linux

trigger: none

resources:
  repositories:
    - repository: templates
      type: git
      name: MPT/ops-build-templates-aks-releases
      ref: releases/v13
  pipelines:
    - pipeline: build
      source: mpt-library-rql-build
      trigger:
        branches:
          include:
            - master
            - release/*
            - refs/heads/master
            - refs/heads/release/*

variables:
  canDeploy: $[ eq(variables['Build.Reason'], 'ResourceTrigger') ]

stages:
  - stage: release_prerequisites
    displayName: Release Prerequisites
    jobs:
      - job: build_artifacts
        displayName: Get Build Artifacts
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'specific'
              project: $(resources.pipeline.build.projectID)
              definition: $(resources.pipeline.build.pipelineID)
              specificBuildWithTriggering: true
              buildVersionToDownload: 'specific'
              pipelineId: $(resources.pipeline.build.runID)
              artifactName: 'mpt-library-rql'
          - bash: |
              version=$(grep 'version:' $(Pipeline.Workspace)/metadata.yaml | awk '{print $2}')
              echo "Read version $version"
              echo "##vso[task.setvariable variable=BUILD_VERSION;isOutput=true]$version"
              echo "##vso[build.updatebuildnumber]$(Build.DefinitionName)_${version}_$(Build.BuildId)"
            displayName: Set build version
            workingDirectory: $(Pipeline.Workspace)

  - stage: deploy
    displayName: 'Deploy nuget package'
    condition: and(succeeded(), eq(variables.canDeploy, 'true'))
    jobs:
      - deployment: push_to_nuget
        displayName: Push package to Nuget feed
        environment: mp-libraries
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'specific'
                    project: $(resources.pipeline.build.projectID)
                    definition: $(resources.pipeline.build.pipelineID)
                    specificBuildWithTriggering: true
                    buildVersionToDownload: 'specific'
                    pipelineId: $(resources.pipeline.build.runID)
                    artifactName: 'packages'
                - task: UseDotNet@2
                  displayName: 'Set dotnet 8.x'
                  continueOnError: true
                  inputs:
                    version: 8.x
                - task: DotNetCoreCLI@2
                  displayName: Push package to NuGet feed
                  inputs:
                    command: 'push'
                    packagesToPush: $(Pipeline.Workspace)/*.nupkg
                    nuGetFeedType: 'internal'
                    feedPublish: PyraCloud
                    arguments: --skip-duplicate
