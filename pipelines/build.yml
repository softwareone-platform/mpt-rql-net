name: $(TeamProject)_$(Build.DefinitionName)_$(Build.BuildId)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
      - master
      - release/*

pool:
  name: Standard-Linux

resources:
  repositories:
    - repository: templates
      type: git
      name: MPT/ops-build-templates-aks-releases
      ref: releases/v13

variables:
  runTests: $[or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.Debug'], true))]

stages:
  - stage: prepare
    dependsOn: [ ]
    displayName: "Prerequisites"
    jobs:
      - template: aks-docker-templates/build_prerequisites.yaml@templates

  - stage: CI
    displayName: CI
    jobs:
      - job: Unittests
        displayName: Run Unit Tests
        condition: eq(variables.runTests, true)
        variables:
          - group: 'shared.servicePrincipal-INFRASTRUCTURE'
        steps:
          - template: /aks-tests-templates/steps/run-tests-in-docker-with-coverlet-steps.yaml@templates
            parameters:
              project: tests/SoftwareOne.Rql.Linq.UnitTests/SoftwareOne.Rql.Linq.UnitTests.csproj
              testType: Unit
              module: main
              uploadArtifact: true
      - job: Build
        variables:
          - group: 'Docker-Nuget-NPM-Auth'
          - group: 'ServicePrincipal - INFRASTRUCTURE'
          - name: HELM_EXPERIMENTAL_OCI
            value: 1
      - job: BuildNugetPackage
        displayName: Build nuget package
        variables:
          - template: aks-docker-templates/acr-creds-group.yaml@templates
          - name: buildversion
            value: $[ stageDependencies.prepare.build_prerequisites.outputs['vars.BUILD_VERSION'] ]
        steps:
          - script: |
              ls
            workingDirectory: pipelines

          - script: |
              docker login nlpapp0336cre.azurecr.io -u $(Azure.ServicePrincipal.Username)  -p $(Azure.ServicePrincipal.Password)
            displayName: Authorize to PROD ACR

          - script: |
              echo "Building version: $(buildVersion)"
              docker run -e BUILD_SOURCEBRANCH=$(Build.SourceBranch) -v ${PWD}:/repo -a stderr -a stdout --name build nlpapp0336cre.azurecr.io/dotnet/sdk:8.0 pwsh /repo/pipelines/build.ps1 -outputDirectory /repo/artifacts -Version $(buildVersion);
            displayName: Build
            env: 
              buildVersion: ${{ variables.buildversion }}

          - script: |
              docker cp build:/repo/artifacts $(Build.ArtifactStagingDirectory)
            displayName: Copy results

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'packages'
              publishLocation: 'Container'

  - stage: sonar
    displayName: Sonarcloud
    jobs:
      - template: aks-tests-templates/jobs/sonar-code-analysis-job.yaml@templates
        parameters:
          projects: '$(System.DefaultWorkingDirectory)/src/**/*.csproj'
          sonarCloudProjectKey: mpt-library-rql
          sonarCloudProjectName: mpt-library-rql
          sonarCloudExtraProperties:  |
            sonar.coverage.exclusions = samples/**
            sonar.cs.opencover.reportsPaths=$(Pipeline.Workspace)/**/coverage-report*