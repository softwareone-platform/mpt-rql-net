name: $(TeamProject)_$(Build.DefinitionName)_$(Build.BuildId)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
      - master
      - release/*
  paths:
    include:
      - src/**

pool:
  name: Standard-Linux

resources:
  repositories:
    - repository: templates
      type: git
      name: MPT/ops-build-templates-aks-releases
      ref: releases/v13

variables:
  runTests: $[ or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.Debug'], true)) ]
  packNugets: $[ or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), eq(variables['System.Debug'], true)) ]

stages:
  - stage: prepare
    displayName: 'Prerequisites'
    jobs:
      - template: aks-docker-templates/build_prerequisites.yaml@templates
      - template: aks-docker-templates/build_artifacts.yaml@templates
        parameters:
          application: mpt-library-rql

  - stage: build
    displayName: Build
    jobs:
      - job: build_solution
        displayName: Build the solution
        variables:
          - name: buildversion
            value: $[ stageDependencies.prepare.build_prerequisites.outputs['vars.BUILD_VERSION'] ]
          - name: nugetVersion
            value: $[ split(variables.buildVersion, '-')[0] ]
        steps:
          - task: UseDotNet@2
            displayName: 'Set dotnet 8.x'
            continueOnError: true
            inputs:
              version: 8.x
          - task: DotNetCoreCLI@2
            displayName: 'Restore solution'
            inputs:
              command: 'restore'
              projects: '$(System.DefaultWorkingDirectory)/SoftwareOne.Rql.sln'
              feedsToUse: 'select'
              vstsFeed: '18b4703c-2fe6-4542-8437-ce8f3c5bc01b'
          - task: DotNetCoreCLI@2
            displayName: 'Build project'
            inputs:
              command: 'build'
              projects: '$(System.DefaultWorkingDirectory)/SoftwareOne.Rql.sln'
              arguments: '--no-restore -c Release -p:Version=$(nugetVersion)'
          - task: DotNetCoreCLI@2
            displayName: 'Create packages'
            condition: and(succeeded(), eq(variables.packNugets, 'true'))
            inputs:
              command: 'pack'
              packagesToPack: 'src/**/*.csproj'
              configuration: 'Release'
              nobuild: true
              versioningScheme: 'byEnvVar'
              versionEnvVar: 'NUGETVERSION'
              packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
          - task: PublishBuildArtifacts@1
            displayName: 'Publish packages'
            condition: and(succeeded(), eq(variables.packNugets, 'true'))
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/packages'
              ArtifactName: 'packages'

  - stage: tests
    displayName: Run tests and code analysis
    jobs:
      - job: Unittests
        displayName: Run Unit Tests and Sonar Analysis
        condition: eq(variables.runTests, true)
        variables:
          - group: 'shared.servicePrincipal-INFRASTRUCTURE'
        steps:
          - checkout: self
            fetchDepth: 0
          - task: UseDotNet@2
            displayName: 'Set dotnet 8.x'
            continueOnError: true
            inputs:
              version: 8.x
          - task: DotNetCoreCLI@2
            displayName: 'Restore solution'
            inputs:
              command: 'restore'
              projects: '$(System.DefaultWorkingDirectory)/SoftwareOne.Rql.sln'
              feedsToUse: 'select'
              vstsFeed: '18b4703c-2fe6-4542-8437-ce8f3c5bc01b'
          - template: /aks-tests-templates/steps/run-tests-in-docker-with-coverlet-steps.yaml@templates
            parameters:
              project: $(System.DefaultWorkingDirectory)/tests/Rql.Tests.Integration/Rql.Tests.Integration.csproj
              module: Rql
              testType: Integration
              uploadArtifact: false
          - template: /aks-tests-templates/steps/run-tests-in-docker-with-coverlet-steps.yaml@templates
            parameters:
              project: $(System.DefaultWorkingDirectory)/tests/SoftwareOne.Rql.Linq.UnitTests/SoftwareOne.Rql.Linq.UnitTests.csproj
              module: Rql.Linq
              testType: Unit
              uploadArtifact: false
          - template: /aks-tests-templates/steps/run-tests-in-docker-with-coverlet-steps.yaml@templates
            parameters:
              project: $(System.DefaultWorkingDirectory)/tests/SoftwareOne.Rql.Parsers.Linear.UnitTests/SoftwareOne.Rql.Parsers.Linear.UnitTests.csproj
              module: Rql.Parsers.Linear
              testType: Unit
              uploadArtifact: false
          - template: aks-tests-templates/steps/sonar-code-analysis-steps.yaml@templates
            parameters:
              projects: '$(System.DefaultWorkingDirectory)/src/**/*.csproj'
              sonarCloudProjectKey: mpt-library-rql
              sonarCloudProjectName: mpt-library-rql
              sonarCloudExtraProperties: |
                sonar.exclusions = samples/**,**/tests/**
                sonar.coverage.exclusions = samples/**,**/tests/**
                sonar.cs.opencover.reportsPaths=$(System.DefaultWorkingDirectory)/**/coverage-report*

  - stage: deploy
    displayName: 'Deploy nuget package'
    condition: and(succeeded(), eq(variables.packNugets, 'true'))
    jobs:
      - deployment: push_to_nuget
        displayName: Push package to Nuget feed
        environment: mp-libraries
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  displayName: 'Download packages artifact'
                  artifact: 'packages'
                - task: UseDotNet@2
                  displayName: 'Set dotnet 8.x'
                  continueOnError: true
                  inputs:
                    version: 8.x
                - task: DotNetCoreCLI@2
                  displayName: Push package to NuGet feed
                  inputs:
                    command: 'push'
                    packagesToPush: $(Pipeline.Workspace)/*.nupkg
                    nuGetFeedType: 'internal'
                    feedPublish: PyraCloud
                    arguments: --skip-duplicate
