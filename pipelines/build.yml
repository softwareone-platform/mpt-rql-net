name: $(TeamProject)_$(Build.DefinitionName)_$(Build.BuildId)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
      - master
      - release/*
  paths:
    include:
      - src/**

pool:
  name: Standard-Linux

resources:
  repositories:
    - repository: templates
      type: git
      name: MPT/ops-build-templates-aks-releases
      ref: releases/v13

variables:
  isMasterOrRelease: ${{ or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')) }}
  isPreRelease: ${{ and(eq(variables['isMasterOrRelease'], 'false'), eq(variables['Build.Reason'], 'Manual')) }}
  publish: ${{ or(eq(variables['isMasterOrRelease'], 'true'), eq(variables['Build.Reason'], 'Manual')) }}

extends:
  template: /nuget-libraries-templates/build_nuget_library_pipeline.yaml@templates
  parameters:
    solutionPath: $(System.DefaultWorkingDirectory)/SoftwareOne.Rql.sln
    testProjects:
      - jobName: linqunittests
        path: $(System.DefaultWorkingDirectory)/tests/SoftwareOne.Rql.Linq.UnitTests/SoftwareOne.Rql.Linq.UnitTests.csproj
        module: Rql.Linq
        testType: Unit
      - jobName: integrationtests
        path: $(System.DefaultWorkingDirectory)/tests/Rql.Tests.Integration/Rql.Tests.Integration.csproj
        module: Rql
        testType: Integration
      - jobName: linearparsersunittests
        path: $(System.DefaultWorkingDirectory)/tests/SoftwareOne.Rql.Parsers.Linear.UnitTests/SoftwareOne.Rql.Parsers.Linear.UnitTests.csproj
        module: Rql.Parsers.Linear
        testType: Unit
    runTests: ${{ or(eq(variables['isMasterOrRelease'], 'true'), eq(variables['Build.Reason'], 'PullRequest')) }}
    analysisExclusions: samples/**,**/tests/**
    analysisCoverageExclusions: samples/**,**/tests/**
    analysisKey: mpt-library-rql
    analysisName: mpt-library-rql
    isPreRelease: ${{ variables.isPreRelease }}
    publish: ${{ variables.publish }}
